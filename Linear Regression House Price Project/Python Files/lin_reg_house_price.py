# -*- coding: utf-8 -*-
"""Lin_Reg_Stat380_House_Price_NULL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dAhNhDq4uGytdFDfnZhMiU4F42NcmVC4
"""

# mount google drive to this notebook to be able to access files in my drive

from google.colab import drive
drive.mount('/content/drive')

# import statements that I will be using for data manipulation
import pandas as pd
import numpy as np

# create links to the csv files for the training and testing data
train_csv = '/content/drive/My Drive/Stat_380/Stat_380_train.csv'
test_csv = '/content/drive/My Drive/Stat_380/Stat_380_test.csv'

# use pandas to read the csv files and convert them to pandas dataframes
# give them corresponding variable names

train_data = pd.read_csv(train_csv)
test_data = pd.read_csv(test_csv)

# drop the "Id" column in the train data since we won't be using this
train_data = train_data.drop("Id", 1)

# drops the Id column from the test data since we will not be using this
test_data = test_data.drop("Id", 1)

# fills the NA in the columns of the train and test dataframes with the mean of the column
# this allows us to run machine learning since ML algorithms cannot process missing values 
train_data =  train_data.fillna(train_data.mean())
test_data =  test_data.fillna(test_data.mean())

# function to replace the String words in a train_data column with dummy variables as numbers
def replace_col(col_name, col_value, num):
  train_data[col_name].replace(col_value, num, inplace=True)
  return train_data

# function to replace the String words in a test_data column with dummy variables as numbers
def replace_col_test(col_name, col_value, num):
  test_data[col_name].replace(col_value, num, inplace=True)
  return test_data

# following operations are done on the train data

# uses the unique() function to take the unique column values from the column specified
column1 = train_data['BldgType'].unique()

# initializes a num variable that will be used for assigning the dummy variables
num = 0

# uses a for loop to iterate through a column name that contains strings
# then calls the replace_col function to replace these columns with dummy variables as numbers
for col_name in column1:

  # replaces the String in the column with a dummy variable as a number
  # then assigns the new dataframe with the modified column as a variable named new_train_data
  new_train_data = replace_col('BldgType', col_name, num)

  # after each dummy variables replaces the strings in the column, it then adds 1 to the num
  # so that num will become a different dummy variable, preventing two different Strings from having the same dummy variable
  num+=1

# the following operations are done on the train data

# uses the unique() function to take the unique column values from the column specified
column2 = train_data['Heating'].unique()

# initializes a num variable that will be used for assigning the dummy variables
num = 0

# uses a for loop to iterate through a column name that contains strings
# then calls the replace_col function to replace these columns with dummy variables as numbers
for col_name in column2:

  # replaces the String in the column with a dummy variable as a number
  # then assigns the new dataframe with the modified column as a variable named new_train_data
  new_train_data = replace_col('Heating', col_name, num)

  # after each dummy variables replaces the strings in the column, it then adds 1 to the num
  # so that num will become a different dummy variable, preventing two different Strings from having the same dummy variable
  num+=1

# the following operations are done on the train data

# uses the unique() function to take the unique column values from the column specified
column3 = train_data['CentralAir'].unique()

# initializes a num variable that will be used for assigning the dummy variables
num = 0

# uses a for loop to iterate through a column name that contains strings
# then calls the replace_col function to replace these columns with dummy variables as numbers
for col_name in column3:

  # replaces the String in the column with a dummy variable as a number
  # then assigns the new dataframe with the modified column as a variable named new_train_data
  new_train_data = replace_col('CentralAir', col_name, num)

  # after each dummy variables replaces the strings in the column, it then adds 1 to the num
  # so that num will become a different dummy variable, preventing two different Strings from having the same dummy variable
  num+=1

# the following operations are done on the test data

# uses the unique() function to take the unique column values from the column specified
column1 = test_data['BldgType'].unique()

# initializes a num variable that will be used for assigning the dummy variables
num = 0

# uses a for loop to iterate through a column name that contains strings
# then calls the replace_col_test function to replace these columns with dummy variables as numbers
for col_name in column1:

  # replaces the String in the column with a dummy variable as a number
  # then assigns the new dataframe with the modified column as a variable named new_test_data
  new_test_data = replace_col_test('BldgType', col_name, num)

  # after each dummy variables replaces the strings in the column, it then adds 1 to the num
  # so that num will become a different dummy variable, preventing two different Strings from having the same dummy variable
  num+=1

# the following operations are done on the test data

# uses the unique() function to take the unique column values from the column specified
column2 = test_data['Heating'].unique()

# initializes a num variable that will be used for assigning the dummy variables
num = 0

# uses a for loop to iterate through a column name that contains strings
# then calls the replace_col_test function to replace these columns with dummy variables as numbers
for col_name in column2:

  # replaces the String in the column with a dummy variable as a number
  # then assigns the new dataframe with the modified column as a variable named new_test_data
  new_test_data = replace_col_test('Heating', col_name, num)

  # after each dummy variables replaces the strings in the column, it then adds 1 to the num
  # so that num will become a different dummy variable, preventing two different Strings from having the same dummy variable
  num+=1

# the following operations are done on the test data

# uses the unique() function to take the unique column values from the column specified
column3 = test_data['CentralAir'].unique()

# initializes a num variable that will be used for assigning the dummy variables
num = 0

# uses a for loop to iterate through a column name that contains strings
# then calls the replace_col_test function to replace these columns with dummy variables as numbers
for col_name in column3:

  # replaces the String in the column with a dummy variable as a number
  # then assigns the new dataframe with the modified column as a variable named new_test_data
  new_test_data = replace_col_test('CentralAir', col_name, num)

  # after each dummy variables replaces the strings in the column, it then adds 1 to the num
  # so that num will become a different dummy variable, preventing two different Strings from having the same dummy variable
  num+=1

# assigns the SalePrice column as the variable train_labels
train_labels = new_train_data['SalePrice']

# after assigning this column we will drop the column since we no longer need this column
new_train_data = new_train_data.drop('SalePrice', 1)

# using linear regression to make a prediction for this assignment
from sklearn.linear_model import LinearRegression

lr = LinearRegression()

# fits the linear regression line for prediction on the train data
lr.fit(new_train_data, train_labels)

# after fitting and training the linear regression model, we will use it to predict the house prices of the test data
predictions = lr.predict(new_test_data)

# imports the sample submission csv file
sample_csv = '/content/drive/My Drive/Stat_380/Sample_submission.csv'

# uses pandas to read this sample submission and then convert it to a dataframe
sample_sub = pd.read_csv(sample_csv)

# replaces the predictions on the sample submission dataframe with the predictions that we made
sample_sub['SalePrice'] = predictions

# then saves this new dataframe with our predictions in it to a csv file so that we can submit to kaggle
sample_sub.to_csv('/content/drive/My Drive/Stat_380/submission5.csv', index = False, header=True)